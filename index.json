{
  "README.html": {
    "href": "README.html",
    "title": "Edge Adapter Modbus Docs",
    "keywords": "Edge Adapter Modbus Docs"
  },
  "V1/Configuration/Configuration.html": {
    "href": "V1/Configuration/Configuration.html",
    "title": "Configuration",
    "keywords": "Configuration OSIsoft Adapter for Modbus TCP provides configuration of data source and data selection. The examples in the configuration topics use curl, a commonly available tool on both Windows and Linux. The adapter can be configured with any programming language or tool that supports making REST calls, or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can perform data retrieval (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/Configuration/OSIsoft Adapter for Modbus TCP data selection configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for Modbus TCP data selection configuration.html",
    "title": "OSIsoft Adapter for Modbus TCP data selection configuration",
    "keywords": "OSIsoft Adapter for Modbus TCP data selection configuration In addition to the data source configuration, you need to provide a data selection configuration to specify the data you want the adapter to collect from the data sources. Configure Modbus TCP data selection You cannot modify Modbus TCP data selection configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following procedure to configure the Modbus TCP data selection: Using any text editor, create a file that contains a Modbus TCP data selection in JSON form. For content structure, see Modbus TCP data selection examples . For a table of all available parameters, see Modbus TCP data selection parameters . Save the file, for example as DataSelection.config.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<adapterId>/DataSelection/ . Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@DataSelection.config.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/<adapterId>/DataSelection\" Modbus TCP data selection schema The full schema definition for the Modbus data selection configuration is in the Modbus_DataSelection_schema.json located here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\Modbus\\Schemas Linux: /opt/OSIsoft/Adapters/Modbus/Schemas Modbus TCP data selection parameters The following parameters are available for configuring a Modbus TCP data selection. Parameter Required Type Description Id Optional string This field is used to update an existing measurement. The ID automatically updates when there are changes to the measurement and will follow the format of <UnitId >. <RegisterType >. <RegisterOffset >. Selected Optional boolean This field is used to select or clear a measurement. To select an item, set to true. To remove an item, leave the field empty or set to false. If not configured, the default value is true. Name Optional string The optional friendly name of the data item collected from the data source. If not configured, the default value will be the stream ID. UnitId Required number Modbus TCP slave device unit ID. This must be a value between 0 and 247, inclusively. RegisterType Required number or string Modbus TCP register type. Supported types are Coil, Discrete, Input16, Input32, Holding16 and Holding32. Input16 and Holding16 are used to read registers that have a size of 16 bits. For registers that have a size of 32 bits, use the Input32 and Holding32 register types. To represent the types, you can type in the register type ID or the exact name: 1 or Coil (Read Coil Status) 2 or Discrete (Read Discrete Input Status) 3 or Holding16 (Read 16-bit Holding Registers) 4 or Holding32 (Read 32-bit Holding Registers) 6 or Input16 (Read 16-bit Input Registers) 7 or Input32 (Read 32-bit Input Registers) For more information, see Register types . RegisterOffset Required number The 0 relative offset to the starting register for this measurement. For example, if your Holding registers start at base register 40001, the offset to this register is 0. For 40002, the offset to this register is 1. DataTypeCode Required number An integer representing the data type that the adapter will read starting at the register specified by the offset. Supported data types are: 1 = Boolean 10 = Int16 20 = UInt16 30 = Int32 31 = Int32ByteSwap 100 = Float32 101 = Float32ByteSwap 110 = Float64 111 = Float64ByteSwap 1001 - 1250 = String 2001 - 2250 = StringByteSwap ScanRate Required number How often this measurement should be read from the device in milliseconds. Acceptable values are from 0 to 86400000. If 0 ms is specified, the adapter will scan for data as fast as possible. BitMap Optional string The bitmap is used to extract and reorder bits from a word register. The format of the bitmap is uuvvwwxxyyzz, where uu, vv, ww, yy, and zz each refer to a single bit. A leading zero is required if the referenced bit is less than 10. The low-order bit is 01 and high-order bit is either 16 or 32. Up to 16 bits can be referenced for a 16-bit word (data types 10 and 20) and up to 32 bits can be referenced for a 32-bit word (data type 30 and 31). The bitmap 0307120802 will map the second bit of the original word to the first bit of the new word, the eighth bit to the second bit, the twelfth bit to the third bit, and so on. The high-order bits of the new word are padded with zeros if they are not specified. ConversionFactor Optional number This numerical value can be used to scale the raw response received from the Modbus TCP device. If this is specified, regardless of the specified data type, the value will be promoted to a float32 (single) when stored. [Result = (Value / Conversion Factor)] ConversionOffset Optional number This numerical value can be used to apply an offset to the response received from the Modbus TCP device. If this is specified, regardless of the specified data type, the value will be promoted to a float32 (single) when stored. [Result = (Value - Conversion Offset)] StreamID Optional string The custom stream ID that will be used to create the streams. If not specified, the adapter will generate a default stream ID based on the measurement configuration. A properly configured custom stream ID follows these rules: Is not case-sensitive. Can contain spaces. Cannot start with two underscores (\"__\"). Can contain a maximum of 100 characters. Cannot use the following characters: / : ? # [ ] @ ! $ & ' ( ) \\ * + , ; = % < > | Cannot start or end with a period. Cannot contain consecutive periods. Cannot consist of only periods. Each JSON object in the file represents a measurement. You can modify the fields in each object to configure the measurement parameters. To add more measurements, you need to create more JSON objects with properly completed fields. Register types Register types are used to configure measurements in Modbus TCP data selection. The adapter supports 6 register types, corresponding to 4 function codes (1-4). Since one function code can return two types of registers, 16-bit or 32-bit depending on the device, either the register type or the register type code is required when configuring the data selection for the adapter. The following table lists all the register types supported in the adapter. Register Type Register Type Code Description Function Code Coil 1 Read Coil Status 1 Discrete 2 Read Discrete Input Status 2 Holding16 3 Read 16-bit Holding Registers 3 Holding32 4 Read 32-bit Holding Registers 3 Input16 6 Read 16-bit Input Registers 4 Input32 7 Read 32-bit Input Registers 4 When reading from function codes 1 and 2 , the adapter expects these to be returned as single bits. For function codes 3 and 4 , the adapter expects 16 bits to be returned from devices that contain 16-bit registers and 32 bits to be returned from devices that contain 32-bit registers. Modbus TCP data selection examples The following are examples of valid Modbus TCP data selection configurations. Minimum data selection configuration: [ { \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": 122, \"DataTypeCode\": 20, \"ScanRate\": 1000, } ] Maximum data selection configuration: [ { \"Id\": \"DataItem1\", \"Selected\": true, \"Name\": \"MyDataItem\", \"UnitId\": 1, \"RegisterType\": 3, \"RegisterOffset\": 123, \"DataTypeCode\": 20, \"ScanRate\": 300, \"StreamId\": \"stream.1\", \"BitMap\": \"020301\", \"ConversionFactor\": 12.3, \"ConversionOffset\": 14.5 } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataSelection GET Retrieves the Modbus TCP data selection configuration api/v1/configuration/ ComponentId /DataSelection PUT Configures or updates the Modbus TCP data selection configuration api/v1/configuration/ ComponentId /DataSelection DELETE Deletes the Modbus TCP data selection configuration Note: Replace ComponentId with the Id of your Modbus TCP component, for example Modbus1."
  },
  "V1/Configuration/OSIsoft Adapter for Modbus TCP data source configuration.html": {
    "href": "V1/Configuration/OSIsoft Adapter for Modbus TCP data source configuration.html",
    "title": "OSIsoft Adapter for Modbus TCP data source configuration",
    "keywords": "OSIsoft Adapter for Modbus TCP data source configuration To use the adapter, you must configure the data source from which it will be polling data. Configure Modbus TCP data source Note: You cannot modify Modbus TCP data source configurations manually. You must use the REST endpoints to add or edit the configuration. Complete the following procedure to configure a Modbus TCP data source: Using any text editor, create a file that contains a Modbus TCP data source in JSON form. For content structure, see Modbus TCP data source examples . For a table of all available parameters, see Modbus TCP data source parameters . Save the file, for example as DataSource.config.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<adapterId>/DataSource/ . Note: The following example uses Modbus1 as the adapter component name. For more information on how to add a component, see System components configuration . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@DataSource.config.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/Modbus1/DataSource\" Modbus TCP data source schema The full schema definition for the Modbus data source configuration is in the Modbus_DataSource_schema.json located here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\Modbus\\Schemas Linux: /opt/OSIsoft/Adapters/Modbus/Schemas Modbus TCP data source parameters The following parameters are available for configuring a Modbus TCP data source. Parameter Required Type Description IpAddress Required string The IP address of the device from which the data will be collected using the Modbus TCP protocol. Host name is not supported. Port Optional number The TCP port of the target device that listens for and responds to Modbus TCP requests. The value ranges from 0 to 65535. If not configured, the default TCP port is 502, which is the default port for Modbus TCP protocol. StreamPrefix Optional number Prefix string applied to all data item IDs and names that are being collected from the data source. If not configured, the default value is the ID of the Modbus TCP adapter instance. Stream prefix is applied to all stream names and IDs with exception of Selection StreamIds unless ApplyPrefixToStreamId is set to true. ApplyPrefixToStreamId Optional boolean Parameter applied to all data items collected from the data source that have custom stream ID configured. If configured, the adapter will apply the StreamIdPrefix property to all the streams with custom ID configured. The property does not affect any streams with default ID configured ConnectTimeout Optional number Parameter to specify the time (in milliseconds) to wait when the adapter is trying to connect to the data source. The value ranges from 1000 ms to 30000 ms. The default value is 5000 ms. ReconnectInterval Optional number Parameter to specify the time (in milliseconds) to wait before retrying to connect to the data source when the data source is offline. The value ranges from 100 ms to 30000 ms. The default value is 1000 ms. RequestTimeout Optional number Parameter to specify the time (in milliseconds) that the adapter waits for a pending request before marking it as timeout and dropping the request. The default value is 10000 ms. The value must be a positive integer. There is no value range. DelayBetweenRequests Optional number Parameter to specify the minimum time (in milliseconds) between two successive requests sent to the data source. The value ranges from 0 ms to 1000 ms. The default value is 0 ms. MaxResponseDataLength Optional number Parameter to limit the maximum length (in bytes) of data that can be read within one transaction. This feature is provided to support devices that limit the number of bytes that can be returned. If there is no device limitation, the request length should be the maximum length of 250 bytes. The value ranges from 2 to 250. The default value is 250 ms. Modbus TCP data source examples The following are examples of valid Modbus TCP data source configurations. Minimum data source configuration: { \"IpAddress\": \"127.0.0.2\", } Maximum data source configuration: { \"IpAddress\": \"127.0.0.4\", \"Port\": 502, \"StreamPrefix\": \"my.prefix\", \"ApplyPrefixToStreamId\": true, \"ConnectTimeout\": 5000, \"ReconnectInterval\": 1000, \"RequestTimeout\": 10000, \"DelayBetweenRequests\": 500, \"MaxResponseDataLength\": 125 } REST URLs Relative URL HTTP verb Action api/v1/configuration/ ComponentId /DataSource GET Retrieves the Modbus TCP data source configuration api/v1/configuration/ ComponentId /DataSource POST Creates the Modbus TCP data source configuration api/v1/configuration/ ComponentId /DataSource PUT Configures or updates the Modbus TCP data source configuration api/v1/configuration/ ComponentId /DataSource DELETE Deletes the Modbus TCP data source configuration Note: Replace ComponentId with the Id of your Modbus TCP component, for example Modbus1."
  },
  "V1/index.html": {
    "href": "V1/index.html",
    "title": "OSIsoft Adapter for Modbus TCP",
    "keywords": "OSIsoft Adapter for Modbus TCP ======= OSIsoft Adapter for Modbus TCP overview OSIsoft Adapter for Modbus TCP principles of operation OSIsoft Adapter for Modbus TCP supported features Installation Install the adapter Uninstall the adapter Configuration Configuration tools System components configuration OSIsoft Adapter for Modbus TCP data source configuration OSIsoft Adapter for Modbus TCP data selection configuration Egress endpoints configuration Health endpoint configuration Diagnostics configuration Buffering configuration Logging configuration System and adapter configuration Administration Start and stop an adapter Start and stop ingress component Retrieve product version information Delete an adapter component Health and diagnostics Adapter health Device status Next health message expected Adapter diagnostics System Stream count IO rate Error rate Egress diagnostics"
  },
  "V1/main/README.html": {
    "href": "V1/main/README.html",
    "title": "OSIsoft Adapter Docs",
    "keywords": "OSIsoft Adapter Docs"
  },
  "V1/main/test.html": {
    "href": "V1/main/test.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Administration/Administration.html": {
    "href": "V1/main/V1/Administration/Administration.html",
    "title": "Administration",
    "keywords": "Administration With the OSIsoft adapter administration level functions, you can start and stop an adapter service and the individual adapter ingress components. You can also retrieve product version information and delete an adapter. The examples in the administration topics use curl, a commonly available tool on both Windows and Linux. You can use the same operations with any programming language or tool that supports making REST calls. You can also configure OSIsoft adapters with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can accomplish data retrieval steps (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/Administration/Delete an adapter component.html": {
    "href": "V1/main/V1/Administration/Delete an adapter component.html",
    "title": "Delete an adapter component",
    "keywords": "Delete an adapter component When an adapter component is removed, the configuration and log files are saved into a sub-directory in case they are needed later. Any associated types, streams, and data will remain on respective endpoints. Complete the following procedure to delete an adapter component: Start any of the Configuration tools capable of making HTTP requests. Execute a DELETE command to the following endpoint: http://localhost:5590/api/v1/configuration/system/components/<ComponentId> Note: An empty DELETE command must be made against the Id of the component to be deleted. 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl Delete OpcUa1 adapter component : curl -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1\" File relocation All configuration and log files will be renamed and moved.The files are renamed according to the timestamp of removal, for example FileName.json_removed_yyyy-MM-dd--hh-mm-ss . Configuration files will be moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\AdapterName\\Configuration\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/AdapterName/Configuration/Removed Log files will be moved to the following location: Windows: %programdata%\\OSIsoft\\Adapters\\AdapterName\\AdapterName\\Logs\\Removed Linux: /usr/share/OSIsoft/Adapters/AdapterName/AdapterName/Logs/Removed In the following example, one Modbus Adapter service is installed on a particular Windows node with the name ModbusService1. A Modbus component with the name ModbusDeviceX was added and configured to this Modbus adapter and later removed. Linux follows a similar behavior. This is the resulting relocation and renaming scheme after deletion: REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components/ ComponentId DELETE Deletes specified component Note: Replace ComponentId with the Id of the component that you want to delete."
  },
  "V1/main/V1/Administration/Retrieve product version information.html": {
    "href": "V1/main/V1/Administration/Retrieve product version information.html",
    "title": "Retrieve product version information",
    "keywords": "Retrieve product version information The product version information includes the application version, the version of the underlying .NET Core Framework, and the operating system that the adapter is running on. Complete the following procedure to retrieve the product version information of an OSIsoft adapter: Start any configuration tool capable of making HTTP requests. Execute a GET command to the following endpoint: http://localhost:5590/api/v1/Diagnostics/ProductInformation Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl Get product information for adapter hosted on port 5590 : curl -d \"\" -X GET \"http://localhost:5590/api/v1/Diagnostics/ProductInformation Example result: { \"Application Version\": \"1.1.0.30\", \".Net Core Version\": \".NET Core 3.1.1\", \"Operating System\": \"Microsoft Windows 10.0.17134\" }"
  },
  "V1/main/V1/Administration/Start and stop an adapter.html": {
    "href": "V1/main/V1/Administration/Start and stop an adapter.html",
    "title": "Start and stop an adapter",
    "keywords": "Start and stop an adapter Complete one of the following procedures for your operating system to start or stop an adapter service: Windows Open Windows services. Select OSIsoft Adapter for AdapterName , for example OSIsoft Adapter for Modbus. Depending on whether your adapter is running or not, click either Start or Stop . Linux Open command line. Depending on whether your adapter is running or not, type one of the following: Example: Start OSIsoft Adapter for OPC UA systemctl start OSIsoft Adapter for OPC UA Example: Stop OSIsoft Adapter for Modbus TCP systemctl stop OSIsoft Adapter for Modbus Press Enter."
  },
  "V1/main/V1/Administration/Start and stop ingress component.html": {
    "href": "V1/main/V1/Administration/Start and stop ingress component.html",
    "title": "Start and stop ingress component",
    "keywords": "Start and stop ingress component To control data ingress, the ingress components of an adapter can be started and stopped whenever necessary. By default, all currently configured ingress components are started. Start an ingress component Complete the following procedure to start an individual ingress component: Start any configuration tool capable of making HTTP requests. Execute a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to start: http://localhost:5590/api/v1/administration/<ingressComponentId>/Start Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl Start the OpcUa1 ingress component : curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/OpcUa1/Start\" Stop an ingress component Complete the following procedure to stop an individual ingress component: Start any configuration tool capable of making HTTP requests. Execute a POST command to the following endpoint, replacing <ingressComponentId> with the ingress component that you want to stop: http://localhost:5590/api/v1/administration/<ingressComponentId>/Stop Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl Stop the Modbus1 ingress component : curl -d \"\" -X POST \"http://localhost:5590/api/v1/Administration/Modbus1/Stop\""
  },
  "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html": {
    "href": "V1/main/V1/ARCHIVE/Adapter diagnostics_old.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics OSIsoft adapters produce diagnostic data which you can use to find more information about a particular adapter instance. This data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For configuration of health endpoints, see </Health/Health.md>. AF hierarchy When you use PI Web API as a health endpoint, an AF hierarchy is created containing both the diagnostics and health data and metadata. Currently, OSIsoft Cloud Services does not provide a way to store static metadata and only contains the dynamic streams. For more information or to see an example of this hierarchy, see </Health/Health.md>. Stream count The stream count indicates the number of streams and associated types being produced and sent data for a particular adapter instance. Type Property Description string Timestamp Timestamp of event int StreamCount Overall number of streams created by the adapter instance int TypeCount Overall number of types created by the adapter instance IO rate The IO rate indicates the running average number of streams per second being produced by an adapter instance. Type Property Description string Timestamp Timestamp of event double IORate Average data rate (streams/second) Error rate The error rate indicates the average number of errors per second occurring for a particular adapter instance. Type Property Description string Timestamp Timestamp of event double ErrorRate Average error rate (streams/second)"
  },
  "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html": {
    "href": "V1/main/V1/ARCHIVE/Egress_DataEndpoints_schema.html",
    "title": "Egress endpoint configuration schema",
    "keywords": "Egress endpoint configuration schema [{ \"endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }, { \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } ] Abstract Extensible Status Identifiable Custom Properties Additional Properties Defined In Can be instantiated Yes Experimental No Forbidden Forbidden Egress_DataEndpoints_schema.json EgressEndpointConfiguration Properties Property Type Required Nullable Defined by ClientId string Optional Yes EgressEndpointConfiguration (this schema) ClientSecret string Optional Yes EgressEndpointConfiguration (this schema) Endpoint string Required No EgressEndpointConfiguration (this schema) Id string Optional Yes EgressEndpointConfiguration (this schema) Password string Optional Yes EgressEndpointConfiguration (this schema) TokenEndpoint string Optional Yes EgressEndpointConfiguration (this schema) UserName string Optional Yes EgressEndpointConfiguration (this schema) ValidateEndpointCertificate boolean Optional No EgressEndpointConfiguration (this schema) ClientId ClientId is optional type: string defined in this schema ClientId Type string , nullable ClientSecret ClientSecret is optional type: string defined in this schema ClientSecret Type string , nullable Endpoint Endpoint is required type: string defined in this schema Endpoint Type string minimum length: 1 characters Id Id is optional type: string defined in this schema Id Type string , nullable Password Password is optional type: string defined in this schema Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string defined in this schema TokenEndpoint Type string , nullable UserName UserName is optional type: string defined in this schema UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean defined in this schema ValidateEndpointCertificate Type boolean All of the following requirements need to be fulfilled. Requirement 1 object with following properties: Property Type Required ClientId string Optional ClientSecret string Optional Endpoint string Required Id string Optional Password string Optional TokenEndpoint string Optional UserName string Optional ValidateEndpointCertificate boolean Optional ClientId ClientId is optional type: string ClientId Type string , nullable ClientSecret ClientSecret is optional type: string ClientSecret Type string , nullable Endpoint Endpoint is required type: string Endpoint Type string minimum length: 1 characters Id Id is optional type: string Id Type string , nullable Password Password is optional type: string Password Type string , nullable TokenEndpoint TokenEndpoint is optional type: string TokenEndpoint Type string , nullable UserName UserName is optional type: string UserName Type string , nullable ValidateEndpointCertificate ValidateEndpointCertificate is optional type: boolean ValidateEndpointCertificate Type boolean"
  },
  "V1/main/V1/Configuration/Buffering configuration.html": {
    "href": "V1/main/V1/Configuration/Buffering configuration.html",
    "title": "Buffering configuration",
    "keywords": "Buffering configuration OSIsoft adapters can be configured to buffer data egressed from the adapter to endpoints. Buffering is configured through the buffering configuration parameters in the system configuration. Note: OSIsoft recommends that you do not modify the default buffering location unless necessary. The changes to the buffering configuration parameters take effect only during adapter service startup. Configure buffering Using any text editor, create a file that contains the buffering configuration in JSON form. For content structure, see the sample output in Examples - Retrieve the buffering configuration . For a table of all available parameters, see Buffering parameters . Save the file, for example as Buffering.json . Use any of the Configuration tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/buffering Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@Buffering.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/buffering\" Buffering schema The full schema definition for the system buffering is in the System_Buffering_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Buffering parameters The following parameters are available for configuring buffering: Parameter Required Type Description EnableBuffering Optional boolean Enables or disables buffering. Default: True Note: If you disable buffering, in-memory buffering will be used. In-memory buffering is limited to 20 MB per endpoint. MaxBufferSizeMB Optional integer Defines the maximum size of the buffer file that will be persisted on disk. The unit is specified in MB (1 Mebibyte = 1048576 bytes). Take into account the capacity and type of the storage medium to determine a suitable value for this parameter. A value of -1 indicates that the buffer file size is restricted only by the available free disk space. Allowed values: -1 or [1, 2147483647]. Default: -1 BufferLocation Required string Defines the location of the buffer files. Absolute paths are required. Take into account access-control list (ACL) when setting this parameter Allowed value: Valid path to a folder location in the file system. Default: Windows: %ProgramData%\\OSIsoft\\Adapters\\{AdapterType}\\{AdapterInstance}\\Buffers Linux: /usr/share/OSIsoft/Adapters/{AdapterType}/{AdapterInstance}/Buffers Examples The following examples are buffering configurations made through curl REST client. Retrieve the buffering configuration curl -X GET \"http://localhost:5590/api/v1/configuration/system/buffering\" Sample output: { \"bufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/Modbus/Modbus/Buffers\", \"maxBufferSizeMB\": -1, \"enableBuffering\": true } 200 OK response indicates success. Update MaxBufferSizeMb parameter curl -d \"{ \"MaxBufferSizeMB\": 100 }\" -H \"Content-Type: application/json\" -X PATCH \"http://localhost:5590/api/v1/configuration/system/buffering\" 204 No Content response indicates success. REST URLs Relative URL HTTP verb Action api/v1/configuration/system/buffering GET Gets the buffering configuration api/v1/configuration/system/buffering PUT Replaces the existing buffering configuration api/v1/configuration/system/buffering PATCH Update parameter, partial configuration"
  },
  "V1/main/V1/Configuration/Configuration tools.html": {
    "href": "V1/main/V1/Configuration/Configuration tools.html",
    "title": "Configuration tools",
    "keywords": "Configuration tools OSIsoft adapters can be configured with either the EdgeCmd utility, OSIsoft's proprietary tool for configuring adapters, or a commonly-used REST tool. EdgeCmd utility The EdgeCmd utility enables adapter configuration on both Linux and Windows operating systems. For more information on using the EdgeCmd utility, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . REST tools The following tools are available to make REST calls. curl curl is a command line tool used to make HTTP calls and is supported on both Windows and Linux operating systems. curl is easily scripted using Bash or PowerShell on either Linux or Windows, and can be used to perform adapter administrative and programming tasks. curl commands are used in configuration and management examples throughout this document. For more information, see curl (https://curl.haxx.se/) . Postman Postman is a REST tool for systems with GUI components. OSIsoft adapters are supported on platforms without GUIs. Postman is particularly useful for learning more about OSIsoft adapter REST APIs. For more information, see Postman (https://www.postman.com/) ."
  },
  "V1/main/V1/Configuration/Diagnostics configuration.html": {
    "href": "V1/main/V1/Configuration/Diagnostics configuration.html",
    "title": "Diagnostics configuration",
    "keywords": "Diagnostics configuration OSIsoft adapters can be configured to produce and store diagnostics data at a designated health endpoint. For more information about adapter diagnostics, see Adapter diagnostics . Configure diagnostics Start any of the Configuration tools capable of making HTTP requests. Execute a PUT command to the following endpoint, setting the enableDiagnostics parameter to either true or false : http://localhost:5590/api/v1/configuration/system/diagnostics Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl: curl -d \"{ \"enableDiagnostics\":true }\" -H \"Content-Type:application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/diagnostics\" Diagnostics schema The full schema definition for the diagnostics configuration is in the System_Diagnostics_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Diagnostics parameters The following parameters are available for configuring diagnostics: Parameter Required Type Description EnableDiagnostics Required boolean Determines whether Diagnostics are enabled. Example Retrieve the diagnostics configuration Example using curl: curl -X GET \"http://localhost:{port}/api/v1/configuration/system/diagnostics\" Sample output: { \"enableDiagnostics\": true } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/diagnostics GET Gets the diagnostics configuration api/v1/configuration/system/diagnostics PUT Replaces the existing diagnostics configuration"
  },
  "V1/main/V1/Configuration/Egress endpoints configuration.html": {
    "href": "V1/main/V1/Configuration/Egress endpoints configuration.html",
    "title": "Egress endpoints configuration",
    "keywords": "Egress endpoints configuration Adapters can egress dynamic data to destinations that you supply through OMF. Supported destinations are OSIsoft Cloud Services and PI servers through PI Web API. An egress endpoint represents a destination to which data will be sent. You can specify multiple endpoints. Every egress endpoint is executed independently of all other egress endpoints and is expected to accept OMF messages. An egress endpoint is comprised of the properties specified under Egress endpoint parameters . Configure egress endpoints Note: You cannot add egress configurations manually because some parameters are encrypted when stored to disk. You must use the REST endpoints to add or edit egress configuration. For additional endpoints, see REST URLs . Complete the following procedure to create new egress endpoints: Using any text editor, create a file that contains one or more egress endpoints in JSON form. For content structure, see Examples . For a table of all available parameters, see Egress endpoint parameters . Save the file, for example as OmfEgress_DataEndpoints.json . Use any of the Configuration tools capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/ Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Examples using curl (run the commands from the same directory where the file is located): Add endpoints curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints\" Delete an endpoint curl -X DELETE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{id}\" Update an endpoint curl -d \"@OmfEgress_DataEndpoints.json\" -H \"Content-Type: application/json\" -X UPDATE \"http://localhost:5590/api/v1/configuration/OmfEgress/dataendpoints/{id}\" View endpoints curl -X GET \"http://localhost:5590/api/v1/configuration/OmfEgress/DataEndpoints\" Egress endpoint configuration schema The full schema definition for the egress endpoint configuration is in the OmfEgress_DataEndpoints_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Egress endpoint parameters The following parameters are available for configuring egress endpoints: Parameter Required Type Description Id Optional string Unique identifier Endpoint Required string Destination that accepts OMF v1.1 messages. Supported destinations include OCS and PI server. Username Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint. Password Required for PI endpoint string Basic authentication to the PI Web API OMF endpoint. ClientId Required for OCS endpoint string Authentication with the OCS OMF endpoint. ClientSecret Required for OCS endpoint string Authentication with the OCS OMF endpoint. TokenEndpoint Optional for OCS endpoint string Retrieves an OCS token from an alternative endpoint. ValidateEndpointCertificate Optional boolean Disables verification of destination certificate. Use for testing only with self-signed certificates. Defaults to true. Examples The following examples are valid egress configurations. Egress data to OCS [{ \"Id\": \"OCS\", \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" }] Egress data to PI Web API [{ \"Id\": \"PI Web API\", \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" }] REST URLs Relative URL HTTP verb Action api/v1/configuration/omfegress/DataEndpoints GET Gets all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints DELETE Deletes all configured egress endpoints api/v1/configuration/omfegress/DataEndpoints POST Adds an array of egress endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/omfegress/DataEndpoints PUT Replaces all egress endpoints api/v1/configuration/omfegress/DataEndpoints/{id} GET Gets configured endpoint by id api/v1/configuration/omfegress/DataEndpoints/{id} DELETE Deletes configured endpoint by id api/v1/configuration/omfegress/DataEndpoints/{id} PUT Replaces egress endpoint by id . Fails if endpoint doesn't exist api/v1/configuration/omfegress/DataEndpoints/{id} PATCH Allows partial updating of configured endpoint by id Egress execution details After you add configuration for an egress endpoint, egress will be executed immediately for that endpoint. Egress is handled individually per configured endpoint. On first execution, types and containers will be egressed. After that only new or changed types or containers will be egressed. Type creation must be successful in order to create containers. Container creation must be successful in order to egress data. If an egress endpoint is removed, data flow will immediately stop for that endpoint. Buffered data of a removed endpoint will be permanently lost. Type, container, and data items are batched into one or more OMF messages when egressing. As per the requirements defined in OMF, a single message payload will not exceed 192KB in size. Compression is automatically applied to outbound egress messages. On the destination, failure to add a single item will result in the message failing. Types, containers, and data will continue to be egressed as long as the destination continues to respond to HTTP requests - retrying previous failures as needed."
  },
  "V1/main/V1/Configuration/Health endpoint configuration.html": {
    "href": "V1/main/V1/Configuration/Health endpoint configuration.html",
    "title": "Health endpoint configuration",
    "keywords": "Health endpoint configuration OSIsoft adapters can be configured to produce and store health data at a designated health endpoint. For more information about adapter health, see Adapter health . Configure health endpoint A health endpoint designates an OSIsoft OMF endpoint where adapter health information should be sent. You can configure multiple health endpoints. Using any text editor, create a file that contains one or more health endpoints in JSON form. For content structure, see Examples . For a table of all available health endpoint parameters, see Health endpoint parameters . Save the file, for example as HealthEndpoints.json . Use any of the Configuration tools capable of making HTTP requests and execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/healthendpoints Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@HealthEndpoints.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/healthendpoints\" Health endpoints schema The full schema definition for the health endpoint configuration is in the System_HealthEndpoints_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Health endpoint parameters The following parameters are available for configuring health endpoints: Parameter Required Type Description Id Optional string Uniquely identifies the endpoint. This can be any alphanumeric string. If left blank, a unique value is generated automatically. Endpoint Required string The URL of the OMF endpoint to receive this health data. Username Required for PI Web API endpoints string The username used to authenticate with a PI Web API OMF endpoint. Password Required for PI Web API endpoints string The password used to authenticate with a PI Web API OMF endpoint. ClientId Required for OCS endpoints string The Client Id used for authentication with an OSIsoft Cloud Services OMF endpoint. ClientSecret Required for OCS endpoints string The Client Secret used for authentication with an OSIsoft Cloud Services OMF endpoint. TokenEndpoint Optional for OCS endpoints string Retrieves an OCS token from an alternative endpoint. ValidateEndpointCertificate Optional boolean Disables verification of destination security certificate. Use for testing only with self-signed certificates; OSIsoft recommends setting this to true in production environments. Defaults to true. Examples OCS endpoint { \"Id\": \"OCS\", \"Endpoint\": \"https://<OCS OMF endpoint>\", \"ClientId\": \"<clientid>\", \"ClientSecret\": \"<clientsecret>\" } PI Web API endpoint { \"Id\": \"PI Web API\", \"Endpoint\": \"https://<pi web api server>/piwebapi/omf/\", \"UserName\": \"<username>\", \"Password\": \"<password>\" } REST URLs Relative URL HTTP verb Action api/v1/configuration/system/healthEndpoints GET Gets all configured health endpoints api/v1/configuration/system/healthEndpoints DELETE Deletes all configured health endpoints api/v1/configuration/system/healthEndpoints POST Adds an array of health endpoints or a single endpoint. Fails if any endpoint already exists api/v1/configuration/system/healthEndpoints PUT Replaces all health endpoints api/v1/configuration/system/healthEndpoints/ id GET Gets configured health endpoint by id api/v1/configuration/system/healthEndpoints/ id DELETE Deletes configured health endpoint by id api/v1/configuration/system/healthEndpoints/ id PUT Replaces health endpoint by id . Fails if endpoint doesn't exist api/v1/configuration/system/healthEndpoints/ id PATCH Allows partial updating of configured health endpoint by id Note: Replace id with the Id of the health endpoint."
  },
  "V1/main/V1/Configuration/Logging configuration.html": {
    "href": "V1/main/V1/Configuration/Logging configuration.html",
    "title": "Logging configuration",
    "keywords": "Logging configuration OSIsoft adapters write daily log messages for the adapter, the system, and omf egress to flat text files in the following locations: • Windows: %ProgramData%\\OSIsoft\\Adapters\\adapterName\\adapterServiceName\\Logs • Linux: /usr/share/OSIsoft/Adapters/adapterName/adapterServiceName/Logs Each message in the log displays the message severity level, timestamp, and the message itself. Configure logging Complete the following procedure to change the logging configuration: Using any text editor, create a file that contains the logging configuration in JSON form. For content structure, see Example . For all available parameters, see Logging parameters . Save the file, for example as Component_Logging.json . Use any of the Configuration tools capable of making HTTP requests to execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/<ComponentId>/Logging . Note: Replace <ComponentId> with the ComponentId of the adapter, for example OpcUa1 . 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@Component_Logging.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/<ComponentId>/Logging\" On successful execution, the log level change takes effect immediately during runtime. The other configurations (log file size and file count) get updated after the adapter is restarted. Note: Any parameter not specified in the updated configuration file will revert to the default schema value. Logging schema The full schema definition for the logging configuration is in the component specific logging file: AdapterName_Logging_schema.json , OmfEgress_Logging_schema.json , or System_Logging_schema.json here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas Logging parameters The following parameters are available for configuring logging: Parameter Required Type Description logLevel Optional reference The logLevel sets the minimum severity for messages to be included in the logs. Messages with a severity below the level set are not included. The log levels in their increasing order of severity are as follows: Trace, Debug, Information, Warning, Error, Critical, None. For detailed information about the logLevels, see LogLevel . logFileSizeLimitBytes Optional integer The maximum size in bytes of log files that the service will create for the component. It must be a positive integer. logFileCountLimit Optional integer The maximum number of log files that the service will create for the component. It must be a positive integer. LogLevel Level Description Trace Logs that contain the most detailed messages. These messages may contain sensitive application data like actual received values, which is why these messages shouldn’t be enabled in production environment. Debug Logs that can be used to troubleshoot data flow issues by recording metrics and detailed flow related information. Information Logs that track the general flow of the application. Any non-repetitive general information (like version information relating to the software at startup, what external services are being used, data source connection string, number of measurements, egress URL, change of state “Starting”, “Stopping”, or configuration) can be useful for diagnosing potential application errors. Warning Logs that highlight an abnormal or unexpected event in the application flow, but does not otherwise cause the application execution to stop. Warning messages can indicate an unconfigured data source state, that a communication with backup failover instance has been lost, an insecure communication channel in use, or any other event that could require attention, but that does not impact data flow. Error Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a failure in the current activity, not an application-wide failure. This can indicate an invalid configuration, unavailable external endpoint, internal flow error, and so on. Critical Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires immediate attention. This can indicate application wide failures like beta timeout expired, unable to start self-hosted endpoint, unable to access vital resource (for example, Data Protection key file), and so on. None Logging is disabled for the given component. Example Default logging configuration By default, logging captures Information, Warning, Error, and Critical messages in the message logs. The following logging configuration is the default for a component on install: { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 } REST URLs Relative URL HTTP verb Action api/v1/configuration/System/Logging GET Retrieves the system logging configuration api/v1/configuration/System/Logging PUT Updates the system logging configuration api/v1/configuration/ ComponentId /Logging GET Retrieves the logging configuration of the specified adapter component api/v1/configuration/ ComponentId /Logging PUT Updates the logging configuration of the specified adapter component Note: Replace ComponentId with the Id of your adapter component, for example Modbus1 or OpcUa1."
  },
  "V1/main/V1/Configuration/System and adapter configuration.html": {
    "href": "V1/main/V1/Configuration/System and adapter configuration.html",
    "title": "System and adapter configuration",
    "keywords": "System and adapter configuration The System and adapter components can be configured together using a single call for replacing the existing configuration. Change system and adapter configuration Change the system and adapter configuration by importing the JSON file using a REST client: Using any text editor, create a file that contains the System and adapter configuration in JSON form. For content structure, see Example . Save the file, for example as SystemAdapter.config.json . Use any of the Configuration Tools capable of making HTTP requests and execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this file from the same directory where the file is located): curl -d \"@SystemAdapter.config.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration\" Note: In order for some of the adapter specific configurations to take effect, you have to restart the adapter. If the operation fails due to errors in the configuration, the count of the error and suitable error message(s) are returned in the result. Example Sample configuration file The following sample file shows the configuration of an OPC UA adapter. { \"OpcUa1\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataSource\": { \"EndpointUrl\": \"opc.tcp://OPCUAServerEndpoint/OPCUA/Server\", \"UseSecureConnection\": false, \"StreamPrefix\": \"OPC_Prefix_\", \"UserName\": null, \"Password\": null, \"RootNodeIds\": null, \"IncomingTimestamp\": \"Source\", \"applyPrefixToStreamId\": true }, \"DataSelection\": [ { \"Selected\": true, \"Name\": \"Sawtooth\", \"NodeId\": \"ns=3;s=Sawtooth\", \"StreamId\": \"SawtoothStream\" } ] }, \"System\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"HealthEndpoints\": [ ], \"Diagnostics\": { \"enableDiagnostics\": true }, \"Components\": [ { \"componentId\": \"Egress\", \"componentType\": \"OmfEgress\" }, { \"componentId\": \"OpcUa1\", \"componentType\": \"OpcUa\" } ], \"Buffering\": { \"BufferLocation\": \"C:/ProgramData/OSIsoft/Adapters/OpcUa/OpcUa/Buffers\", \"MaxBufferSizeMB\": -1, \"EnableBuffering\": true } }, \"OmfEgress\": { \"Logging\": { \"logLevel\": \"Information\", \"logFileSizeLimitBytes\": 34636833, \"logFileCountLimit\": 31 }, \"DataEndpoints\": [ { \"id\": \"WebAPI EndPoint\", \"endpoint\": \"https://PIWEBAPIServer/piwebapi/omf\", \"userName\": \"USERNAME\", \"password\": \"PASSWORD\" }, { \"id\": \"OCS Endpoint\", \"endpoint\": \"https://OCSEndpoint/omf\", \"clientId\": \"CLIENTID\", \"clientSecret\": \"CLIENTSECRET\" } ] } } REST URLs Relative URL HTTP verb Action api/v1/configuration/ PUT Replaces the configuration for the entire adapter"
  },
  "V1/main/V1/Configuration/System components configuration.html": {
    "href": "V1/main/V1/Configuration/System components configuration.html",
    "title": "System components configuration",
    "keywords": "System components configuration OSIsoft adapters use JSON configuration files in a protected directory on Windows and Linux to store configuration that is read on startup. While the files are accessible to view, OSIsoft recommends that you use REST or EdgeCmd utility for any changes you make to the files. As part of making adapters as secure as possible, any passwords or secrets that you configure are stored in encrypted form (with cryptographic key material stored separately in a secure location.) If you edit the files directly, the adapter may not work as expected. Note: You can edit any single component or facet of the system using REST, but also configure the system as a whole with a single REST call. Configure system components The configuration of system components includes adding, updating and deleting components. Add a system component Complete the following procedure to add a new component to the system: Using any text editor, create a file that contains the component to be added to the system in JSON form. For content structure, see Examples . For a table of all available parameters, see System components parameters . Note: The OmfEgress component is required for this initial release for adapters to run. You can add additional components if you want, but only a single OmfEgress component is supported. The following example adds a Modbus TCP adapter. { \"ComponentId\": \"Modbus1\", \"ComponentType\": \"Modbus\" } Note: A unique ComponentId is necessary for each component in the system. This example uses the ComponentId Modbus1 since it is the first Modbus TCP adapter: Save the file, for example as AddComponent.json . Use any of the Configuration tools capable of making HTTP requests to execute a POST command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/components Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@AddComponent.json\" -H \"Content-Type: application/json\" -X POST \"http://localhost:5590/api/v1/configuration/system/components\" After the curl command completes successfully, you can configure or use the new component. Update system components Complete the following procedure to update the system components, for example by adding or removing components. Using any text editor, create a file that contains the current system components configuration. For information on how to retrieve the system components configuration, see REST URLs . Remove or add components as you need. Note: You cannot remove the OmfEgress component. Save the file, for example as UpdateComponents.json Use any of the Configuration tools capable of making HTTP requests to execute a PUT command with the contents of that file to the following endpoint: http://localhost:5590/api/v1/configuration/system/components Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located): curl -d \"@UpdateComponents.json\" -H \"Content-Type: application/json\" -X PUT \"http://localhost:5590/api/v1/configuration/system/components\" Delete a system component Complete the following procedure to delete an existing component: Start any of the Configuration tools capable of making HTTP requests. Execute a DELETE command to the following endpoint, replacing <ComponentId> with the ID of the component that you want to delete: http://localhost:5590/api/v1/configuration/system/components/<ComponentId>/ Note: 5590 is the default port number. If you selected a different port number, replace it with that value. Example using curl (run this command from the same directory where the file is located) Delete OpcUa1 component url -X DELETE \"http://localhost:5590/api/v1/configuration/system/components/OpcUa1/\" All the logs and configurations files for the deleted components will be moved to the corresponding logs/Removed or Configuration/Removed folder. System components schema The full schema definition for the system components configuration is in the System_Components_schema.json located here: Windows: %ProgramFiles%\\OSIsoft\\Adapters\\AdapterName\\Schemas Linux: /opt/OSIsoft/Adapters/AdapterName/Schemas System components parameters The following parameters are available for configuring system components: Parameters Required Type Description ComponentId Required string The ID of the component. It can be any alphanumeric string, for example OmfEgress. ComponentType Required string The type of the component, for example OmfEgress. There are two types of components: OmfEgress and the adapter. Examples Default system components configuration The default System_Components.json file for the System component contains the following information. [ { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] System components configuration with two adapter instances [ { \"componentId\": \"Modbus1\", \"componentType\": \"Modbus\" }, { \"componentId\": \"Modbus2\", \"componentType\": \"Modbus\" }, { \"ComponentId\": \"OmfEgress\", \"ComponentType\": \"OmfEgress\" } ] REST URLs Relative URL HTTP verb Action api/v1/configuration/system/components GET Retrieves the system components configuration api/v1/configuration/system/components POST Adds a new component to the system configuration api/v1/configuration/system/components PUT Updates the system components configuration api/v1/configuration/system/components/ componentId DELETE Deletes a specific component from the system components configuration"
  },
  "V1/main/V1/Diagnostics/Adapter diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Adapter diagnostics.html",
    "title": "Adapter diagnostics",
    "keywords": "Adapter diagnostics The adapter and its components produce different kinds of diagnostics data which is sent to all health endpoints. The System_Diagnostics.json file contains a flag which determines whether Diagnostics are enabled. You can change this at runtime through REST calls or the EdgeCmd utility. Diagnostics data are collected by default. To egress diagnostics related data, you have to configure an adapter health endpoint first. See Health endpoint configuration . Available diagnostics data Dynamic data is sent every minute to configured health endpoints. The following diagnostics data are available: System Stream count IO rate Error rate AF structure After running diagnostics with a health endpoint configured to a PI server, you can use PI System Explorer to view the diagnostics for a given adapter. The element hierarchy is shown in the following image. The_ Elements root contains a link to an Adapters _ node. This is the root note for all adapter instances. Below Adapters there will be one or more adapter nodes. Each node's title is defined by the node's corresponding computer name and service name in this format: _**{ComputerName}.{ServiceName}**_ . For example, in the following image, MachineName is the computer name, and OpcUa is the service name. To see the System.Diagnostics values, clicking on an adapter node and set the tab to Attributes . Example values are shown in the image."
  },
  "V1/main/V1/Diagnostics/Egress diagnostics.html": {
    "href": "V1/main/V1/Diagnostics/Egress diagnostics.html",
    "title": "Egress diagnostics",
    "keywords": "Egress diagnostics The Egress component of the adapter produces the following diagnostics streams. IO rate The Diagnostics.Egress.IORate dynamic type includes these values, which are logged in a stream with the id {machineName}.{serviceName}.OmfEgress.{EndpointId}.IORate. IO rate includes only sequential data successfully sent to an egress. Property Type Description timestamp string Timestamp of event IORate double 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Error rate.html": {
    "href": "V1/main/V1/Diagnostics/Error rate.html",
    "title": "Error rate",
    "keywords": "Error rate The Diagnostics.Adapter.ErrorRate dynamic type includes these values, which are logged in a stream with the id {componentid}.ErrorRate. Property Type Description timestamp string Timestamp of event ErrorRate double 1-minute rolling average of error rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/IO rate.html": {
    "href": "V1/main/V1/Diagnostics/IO rate.html",
    "title": "IO rate",
    "keywords": "IO rate The Diagnostics.Adapter.IORate dynamic type includes these values, which are logged in a stream with the id {componentid}.IORate. IO rate includes only sequential data collected from a data source. Property Type Description timestamp string Timestamp of event IORate double 1-minute rolling average of data rate (streams/second)"
  },
  "V1/main/V1/Diagnostics/Stream count.html": {
    "href": "V1/main/V1/Diagnostics/Stream count.html",
    "title": "Stream count",
    "keywords": "Stream count The Diagnostics.StreamCountEvent dynamic type includes these values, which are logged in a stream with the id {componentid}.StreamCount. The stream count and type count include only types and streams created for sequential data received from a data source. Property Type Description timestamp string Timestamp of event StreamCount int Number of streams created by the adapter instance TypeCount int Number of types created by the adapter instance"
  },
  "V1/main/V1/Diagnostics/System.html": {
    "href": "V1/main/V1/Diagnostics/System.html",
    "title": "System",
    "keywords": "System The Diagnostics.System dynamic type includes the following values which are logged in a stream with the id System.Diagnostics. This diagnostic stream contains system level information related to the host platform that the adapter is running on. Property Type Description timestamp string Timestamp of event ProcessIdentifier int Process id of the host process StartTime string Time at which the host process started WorkingSet long Amount of physical memory in bytes, allocated for the host process TotalProcessorTime (uom=s) double Total processor time for the host process expressed in seconds TotalUserProcessorTime (uom=s) double User processor time for the host process expressed in seconds TotalPrivilegedProcessorTime (uom=s) double Privileged processor time for the host process expressed in seconds ThreadCount int Number of threads in the host process HandleCount int Number of handles opened by the host process ManagedMemorySize (uom=MB) double Number of bytes currently thought to be allocated in managed memory PrivateMemorySize (uom=MB) double Amount of paged memory, in bytes, allocated for the host process PeakPagedMemorySize (uom=MB) double Maximum amount of memory in the virtual memory paging file, in bytes, used by the host process. StorageTotalSize (uom=MB) double Total size of the storage medium in use by the system StorageFreeSpace (uom=MB) double Free space available Each adapter component produces its own diagnostics streams."
  },
  "V1/main/V1/Health/Adapter health.html": {
    "href": "V1/main/V1/Health/Adapter health.html",
    "title": "Adapter health",
    "keywords": "Adapter health OSIsoft adapters produce different kinds of health data, which can be egressed to different health endpoints. For details, see the following sections. Available health data Dynamic data is sent every minute to configured health endpoints. The following health data are available: Device status Next Health Message Expected Health endpoint differences Two following two OMF endpoints are currently supported for adapter health data: PI Web API OSIsoft Cloud Services There are a few differences in how these two systems treat the associated health data. PI Web API parses the information and sends it configured PI Systems for the OMF endpoint. The static data is used to create a hierarchy on a PI AF server similar to the following: The dynamic health data is actually time-series data that is stored in PI points on a PI Data Archive and can be seen in the AF hierarchy as PI Point Data Reference attributes. OSIsoft Cloud Services currently does not have a way to store the static metadata. For OCS-based adapter health endpoints, only the dynamic data will be stored. Each value will be its own stream with the timestamp property as the single index."
  },
  "V1/main/V1/Health/Device status.html": {
    "href": "V1/main/V1/Health/Device status.html",
    "title": "Device status",
    "keywords": "Device status The device status indicates the health of this component and if it is currently communicating properly with the data source. This time-series data is stored within a PI point or OCS stream, depending on the endpoint type. During healthy steady-state operation, a value of \"Good\" is expected. Property Type Description Time string Timestamp of the event. DeviceStatus string The value of the DeviceStatus. The possible statuses are: Status Meaning Good The component is connected to the data source and it is collecting data. ConnectedNoData The component is connected to the data source but it is not receiving data from it. AttemptingFailover The adapter is attempting to failover. Starting The component is currently in the process of starting up and is not yet connected to the data source. DeviceInError The component encountered an error either while connecting to the data source or attempting to collect data. Shutdown The component is either in the process of shutting down or has finished. Removed The adapter component has been removed and will no longer collect data. NotConfigured The adapter component has been created but is not yet configured."
  },
  "V1/main/V1/Health/Health and diagnostics.html": {
    "href": "V1/main/V1/Health/Health and diagnostics.html",
    "title": "Health and Diagnostics",
    "keywords": "Health and Diagnostics OSIsoft adapters produce various types of health data. You can use health data to ensure that your adapters are running properly and data is flowing to the configured OSIsoft OMF endpoints. For more information, see Adapter health . OSIsoft adapters also produce diagnostic data. You can use diagnostic data to find more information about a particular adapter instance. Diagnostic data lives alongside the health data and you can egress it using a Health Endpoint and setting EnableDiagnostics = true. For more information, see Adapter diagnostics . The examples in the configuration topics use curl, a commonly available tool on both Windows and Linux. The adapter can be configured with any programming language or tool that supports making REST calls, or with the EdgeCmd utility. For more information, see the EdgeCmd utility documentation (https://osisoft.github.io/Edgecmd-Docs/V1.1/EdgeCmd_utility_1-1.html) . To validate successful configurations, you can perform data retrieval (GET commands) using a browser, if available on your device. For more information on OSIsoft adapter configuration tools, see Configuration tools ."
  },
  "V1/main/V1/Health/Next health message expected.html": {
    "href": "V1/main/V1/Health/Next health message expected.html",
    "title": "Next health message expected",
    "keywords": "Next health message expected This property is similar to a heartbeat. A new value for NextHealthMessageExpected will be sent by an individual adapter data component on a periodic basis while it is functioning properly. This value will be a timestamp indicating when the next value should be received. When monitoring, if the next value is not received by the indicated time, this likely means that there is an issue. It could be an issue with the adapter, adapter component, network connection between the health endpoint and the adapter, etc. Property Type Description Time string Timestamp of the event. NextHealthMessageExpected string Timestamp when next value is expected."
  },
  "V1/main/V1/Installation/Install the adapter.html": {
    "href": "V1/main/V1/Installation/Install the adapter.html",
    "title": "Install the adapter",
    "keywords": "Install the adapter Adapters can be installed on either a Windows or Linux operating system. Before installing the adapter, see the Installation prerequisites section to ensure your machine is properly configured to provide optimum adapter operation. Windows Complete the following procedure to install an OSIsoft adapter on Windows: Download the Windows .msi file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Run the .msi file. Follow the setup wizard. You can change the installation folder or port number during setup. The default port number is 5590. Optional: To verify the installation, run the following curl command using the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned Linux Complete the following procedure to install an OSIsoft adapter on Linux: Download the appropriate Linux distribution file from the OSIsoft Customer portal (https://customers.osisoft.com/s/products) . Note: Customer login credentials are required to access the portal. Open a terminal. Run the sudo apt install command. Examples : To install the Linux ARM Debian package, run command sudo apt install ./Modbus_linux-arm.deb To install the Linux x64 package, run command sudo apt install ./Modbus_linux-x64.deb Optional: To verify the installation, run the following curl command using the port number that you specified during installation: curl http://localhost:5590/api/v1/configuration If you receive an error, wait a few seconds and try the script again. If the installation was successful, a JSON copy of the default system configuration is returned."
  },
  "V1/main/V1/Installation/Installation.html": {
    "href": "V1/main/V1/Installation/Installation.html",
    "title": "Installation",
    "keywords": "Installation Adapters are installed on a local machine using an install kit downloaded from the OSIsoft Customer Portal. For instructions on downloading and installing adapters, see Install the adapter . Installation prerequisites Adapters require the installation of the following software: Operating systems: Alpine: 3.10+ Debian: 9+ Ubuntu: 16.04+ Fedora: 29+ centOS: 7+ RHEL: 6+ openSUSE: 15+ SUSE Enterprise Linux (SLES): 12 SP2+ macOS: 10.13+ Windows Client: 8.1, 10 (1607+) Windows Server: 2012 R2+"
  },
  "V1/main/V1/Installation/Uninstall the adapter.html": {
    "href": "V1/main/V1/Installation/Uninstall the adapter.html",
    "title": "Uninstall the adapter",
    "keywords": "Uninstall the adapter Complete one of the following procedures for your operating system to uninstall an OSIsoft adapter: Windows To remove the OSIsoft adapter program files from a Windows device, use the Windows Control Panel uninstall application process. Note: The configuration, data, and log files are not removed by the uninstall process. Optional: To remove data, configuration and log files, remove the directory %ProgramData%\\OSIsoft\\Adapters\\AdapterName . This will delete all data processed by the adapter in addition to configuration and log files. Linux To remove OSIsoft adapter software from a Linux device, open a terminal window and run the following command: sudo apt remove osisoft.adapters.<AdapterName> Optional: To remove data, configuration, and log files, remove the directory /usr/share/OSIsoft/Adapters/AdapterName . This will delete all data processed by the adapter, in addition to configuration and log files. Alternatively, you can run the following command: sudo rm -r /usr/share/OSIsoft/Adapters/<AdapterName>"
  },
  "V1/main/V1/readme.html": {
    "href": "V1/main/V1/readme.html",
    "title": "",
    "keywords": ""
  },
  "V1/main/V1/Troubleshooting/Data buffering.html": {
    "href": "V1/main/V1/Troubleshooting/Data buffering.html",
    "title": "Data buffering",
    "keywords": "Data buffering"
  },
  "V1/main/V1/Troubleshooting/Logging.html": {
    "href": "V1/main/V1/Troubleshooting/Logging.html",
    "title": "Logging",
    "keywords": "Logging"
  },
  "V1/main/V1/Troubleshooting/Troubleshooting.html": {
    "href": "V1/main/V1/Troubleshooting/Troubleshooting.html",
    "title": "Troubleshooting",
    "keywords": "Troubleshooting"
  },
  "V1/OSIsoft Adapter for Modbus TCP overview/OSIsoft Adapter for Modbus TCP principles of operation.html": {
    "href": "V1/OSIsoft Adapter for Modbus TCP overview/OSIsoft Adapter for Modbus TCP principles of operation.html",
    "title": "OSIsoft Adapter for Modbus TCP principles of operation",
    "keywords": "OSIsoft Adapter for Modbus TCP principles of operation This adapters's operations focus on data collection and stream creation. Adapter configuration For the Modbus TCP adapter to start data collection, configure the following: Data source: Provide the data source from which the adapter should collect data. Data selection: Perform selection of Modbus TCP items to which the adapter should subscribe for data. Logging: Set up the logging attributes to manage the adapter logging behavior. For more details, see OSIsoft Adapter for Modbus TCP data source configuration and OSIsoft Adapter for Modbus TCP data selection configuration . Connection The adapter communicates with the Modbus TCP devices through the TCP/IP network by sending request packets that are constructed based on the data selection configurations, and collects the response packets returned by the devices. Data collection The adapter collects data from the Modbus TCP devices at the polling rates that you specify. The rates are set in each of the data selection configurations and can range from 0 milliseconds (as fast as possible) up to 1 day per polling. The adapter automatically optimizes the data collection process by grouping the requests to reduce the I/O load imposed to the Modbus TCP networks. Data types The adapter converts readings from single or multiple registers into the data types specified by the data type code and populates the value into streams. The following table lists all data types with their corresponding type codes supported by the adapter. Data type code Data type name Value type Register type Description 1 Boolean Boolean Bool 0 = false 1 = true 10 Int16 Int16 Bool/16-bit Read 1 Modbus TCP register and interpret as a 16-bit integer. Bytes [BA] read from the device are stored as [AB]. 20 UInt16 UInt16 Bool/16-bit Read 1 Modbus TCP register and interpret as an unsigned 16-bit integer. Bytes [BA] read from the device are stored as [AB]. 30 Int32 Int32 16-bit/32-bit Read 32 bits from the Modbus TCP device and interpret as a 32-bit integer. Bytes [DCBA] read from the device are stored as [ABCD]. 31 Int32ByteSwap Int32 16-bit/32-bit Read 32 bits from the Modbus TCP device and interpret as a 32-bit integer. Bytes [BADC] read from the device are stored as [ABCD]. 100 Float32 Float32 16-bit/32-bit Read 32 bits from the Modbus TCP device and interpret as a 32-bit float. Bytes [DCBA] read from the device are stored as [ABCD]. 101 Float32ByteSwap Float32 16-bit/32-bit Read 32 bits from the Modbus TCP device and interpret as a 32-bit float. Bytes [BADC] read from the device are stored as [ABCD]. 110 Float64 Float64 16-bit/32-bit Read 64 bits from the Modbus TCP device and interpret as a 64-bit float. Bytes [HGFEDCBA] read from the device are stored as [ABCDEFGH]. 111 Float64ByteSwap Float64 16-bit/32-bit Read 64 bits from the Modbus TCP device and interpret as a 64-bit float. Bytes [BADCFEHG] read from the device are stored as [ABCDEFGH]. 1001 - 1250 String String 16-bit/32-bit 1001 reads a one-character string, 1002 reads a two-character string, and 1003 reads a three-character string and so on. Bytes [AB] are interpreted as \"AB\". 2001 - 2250 StringByteSwap String 16-bit/32-bit 2001 reads a one-character string, 2002 reads a two-character string, and 2003 reads a three-character string and so on. Bytes [BA] are interpreted as \"AB\". Stream creation From the parsed data selection configurations, the adapter creates types, streams and data based on the information provided. For each measurement in the data selection configuration, a stream is created to store time series data. Streams by Modbus TCP adapter For each data selection configuration, the adapter creates a stream with two properties, which are described in the following table: Property name Data type Description Timestamp String The response time of the stream data from the Modbus TCP device. Value Specified by the data selection The value of the stream data from the Modbus TCP device. Each stream created for the selected measurement has a unique identifier (Stream ID). If a custom stream ID is specified for the measurement in the data selection configuration, the adapter will use that stream ID to create the stream. Otherwise, the connector constructs the stream ID using the following format: <Adapter Component ID>.<Unit ID>.<Register Type>.<Register Offset> Note: Naming convention is affected by StreamIdPrefix and ApplyPrefixToStreamID settings in data source configuration. For more information, see OSIsoft Adapter for Modbus TCP data source configuration ."
  },
  "V1/OSIsoft Adapter for Modbus TCP overview/OSIsoft Adapter for Modbus TCP supported features.html": {
    "href": "V1/OSIsoft Adapter for Modbus TCP overview/OSIsoft Adapter for Modbus TCP supported features.html",
    "title": "OSIsoft Adapter for Modbus TCP supported features",
    "keywords": "OSIsoft Adapter for Modbus TCP supported features For certain data types, the adapter supports applying bitmaps and applying data conversion. Bitmap application The adapter supports applying bitmaps to the value converted from reading the Modbus TCP devices. A bitmap is a series of numbers used to extract and reorder bits from a word register. The format of the bitmap is uuvvwwxxyyzz, where uu, vv, ww, yy, and zz each refer to a single bit. A leading zero is required if the referenced bit is less than 10. The low-order bit is 01 and high-order bit is either 16 or 32. Up to 16 bits can be referenced for a 16-bit word (data types 10 and 20) and up to 32 bits can be referenced for a 32-bit word (data type 30 and 31). For example, the bitmap 0307120802 will map the second bit of the original word to the first bit of the new word, the eighth bit to the second bit, the twelfth bit to the third bit, and so on. The high-order bits of the new word are padded with zeros if they are not specified. Not all data types support applying bitmap. The data types supporting bitmap are: Int16 (Data type code 10) UInt16 (Data type code 20) Int32 (Data type code 30 and 31) Data conversion application The adapter supports applying data conversion to the value converted from reading the Modbus TCP devices. A conversion factor and conversion offset can be specified. The conversion factor is used for scaling the value up or down, and the conversion offset is used for shifting the value. The mathematical equation used in conversion is the following: <After Conversion> = <Before Conversion> / Factor - Offset Not all data types support applying data conversion. Data types that support data conversion are: Int16 (Data type code 10) UInt16 (Data type code 20) Int32 (Data type code 30 and 31) Float32 (Data type code 100 and 101) The value with data conversion applied will always be converted to the 32-bit float type to maintain the precision of the conversion factor and conversion offset."
  },
  "V1/OSIsoft_Adapter_for_Modbus_TCP_overview.html": {
    "href": "V1/OSIsoft_Adapter_for_Modbus_TCP_overview.html",
    "title": "OSIsoft Adapter for Modbus TCP overview",
    "keywords": "OSIsoft Adapter for Modbus TCP overview The OSIsoft Adapter for Modbus TCP is a data-collection component that transfers time-series data from source devices to OMF endpoints in OSIsoft Cloud Services or PI Servers. Modbus TCP is a commonly available communication protocol used for connecting and transmitting information between industrial electronic devices. The adapter can connect to any device that uses the Modbus TCP communication protocol. The adapter is installed with a download kit obtained from the OSIsoft Customer Portal and works on devices running either Windows or Linux operating systems. All functions of the adapter are configured using REST API. The configurations are stored in JSON files. For data ingress, an adapter component must be defined in the system components configuration for each device to which the adapter will connect. Each adapter component is then configured with the connection information for the device and the data to collect. For data egress, configuration is needed to specify destinations for the data, including security for the outgoing connection. Additional configurations are available to egress health and diagnostics data, add buffering configuration to protect against data loss, and record logging information for troubleshooting purposes. Once the adapter is configured and sending data, administration functions are used to manage the adapter or individual ingress components of the adapter. Health and diagnostics functions monitor the status of connected devices, adapter system functions, the number of active data streams, the rate of data ingress, the rate of errors, and the rate of data egress. The EdgeCmd utility is an OSIsoft proprietary command line tool that is used to configure and administer an adapter on both Linux and Windows operating systems. It is installed separately from the adapter."
  },
  "V1/readme.html": {
    "href": "V1/readme.html",
    "title": "",
    "keywords": ""
  }
}